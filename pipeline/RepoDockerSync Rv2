pipeline {
    agent any
    
    environment {
        SOURCE_REGISTRY = "nexus.cekino.local:5005"
        TARGET_REGISTRY = "172.16.6.180:5002"
    }

    stages {
        stage('Login to Registries') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'SOURCE_USER', passwordVariable: 'SOURCE_PASS')]) {
                        sh "echo \"$SOURCE_PASS\" | docker login --username \"$SOURCE_USER\" --password-stdin $SOURCE_REGISTRY"
                    }

                    withCredentials([usernamePassword(credentialsId: 'nexus-credentialss', usernameVariable: 'TARGET_USER', passwordVariable: 'TARGET_PASS')]) {
                        sh "echo \"$TARGET_PASS\" | docker login --username \"$TARGET_USER\" --password-stdin $TARGET_REGISTRY"
                    }
                }
            }
        }

        stage('Pull and Push All Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'SOURCE_USER', passwordVariable: 'SOURCE_PASS')]) {
                        def repoOutput = sh(
                            script: "curl -s -u \"$SOURCE_USER:$SOURCE_PASS\" http://$SOURCE_REGISTRY/v2/_catalog | jq -r '.repositories[]'",
                            returnStdout: true
                        ).trim()

                        if (!repoOutput) {
                            error "‚ùå No repositories found in source registry!"
                        }

                        def repositories = repoOutput.split('\n')
                        echo "üîç Found repositories: ${repositories}"

                        for (repo in repositories) {
                            def tagOutput = sh(
                                script: "curl -s -u \"$SOURCE_USER:$SOURCE_PASS\" http://$SOURCE_REGISTRY/v2/$repo/tags/list | jq -r '.tags[]'",
                                returnStdout: true
                            ).trim()

                            if (!tagOutput) {
                                echo "‚ö†Ô∏è No tags found for repository: ${repo}, skipping..."
                                continue
                            }

                            def tags = tagOutput.split('\n')
                            echo "üì¶ Tags in ${repo}: ${tags}"

                            for (tag in tags) {
                                def imageName = "${SOURCE_REGISTRY}/${repo}:${tag}"

                                // Eƒüer imaj localde varsa pull etme
                                def imageExists = sh(
                                    script: "docker images -q ${imageName} || true",
                                    returnStdout: true
                                ).trim()

                                if (imageExists) {
                                    echo "‚úÖ ${imageName} already exists locally, skipping pull."
                                } else {
                                    echo "‚è¨ Pulling ${imageName}..."
                                    sh "docker pull ${imageName}"
                                }

                                echo "üöÄ Pushing ${imageName} to ${TARGET_REGISTRY}/${repo}:${tag}"
                                sh """
                                    docker tag ${imageName} ${TARGET_REGISTRY}/${repo}:${tag}
                                    docker push ${TARGET_REGISTRY}/${repo}:${tag}
                                    docker rmi ${TARGET_REGISTRY}/${repo}:${tag} ${imageName} || true
                                """
                                echo "‚úÖ ${repo}:${tag} successfully transferred and cleaned up!"
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üéâ All images successfully transferred and cleaned up!"
            
            def mailList = "s.parti@gardiyan.com,selimf92@gmail.com"
            
            emailext(
                subject: "‚úÖ Jenkins Pipeline Completed: ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
                    <h2>üöÄ Jenkins Pipeline Completed Successfully!</h2>
                    <ul>
                        <li><b>Job:</b> ${JOB_NAME}</li>
                        <li><b>Build Number:</b> ${BUILD_NUMBER}</li>
                        <li><b>Result:</b> ${currentBuild.result}</li>
                    </ul>
                    <p><b>All images have been successfully transferred and cleaned up! üéâ</b></p>
                    <p><a href="${BUILD_URL}">Click here to view Jenkins logs</a></p>
                """,
                to: mailList,
                from: "performans92@gmail.com",
                mimeType: 'text/html'
            )
        }
        failure {
            echo "‚ùå Error occurred during image transfer!"
            
            def mailList = "s.parti@gardiyan.com,selimf92@gmail.com"
            
            emailext(
                subject: "‚ùå Jenkins Pipeline Failed: ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
                    <h2>‚ö†Ô∏è Jenkins Pipeline Failed! üòû</h2>
                    <ul>
                        <li><b>Job:</b> ${JOB_NAME}</li>
                        <li><b>Build Number:</b> ${BUILD_NUMBER}</li>
                        <li><b>Result:</b> ${currentBuild.result}</li>
                    </ul>
                    <p><b>Please check Jenkins logs for details:</b></p>
                    <p><a href="${BUILD_URL}">View Logs</a></p>
                """,
                to: mailList,
                from: "performans92@gmail.com",
                mimeType: 'text/html'
            )
        }
    }
}

