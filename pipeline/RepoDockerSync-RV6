pipeline {
    agent any

    options {
        disableConcurrentBuilds()
    }

    environment {
        SOURCE_REGISTRY = "172.16.20.141:8085"
        TARGET_REGISTRY = "172.16.6.180:5002"
    }

    stages {
        stage('Login to Registries') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'SRC_USER', passwordVariable: 'SRC_PASS'),
                    usernamePassword(credentialsId: 'nexus-credentialss', usernameVariable: 'TGT_USER', passwordVariable: 'TGT_PASS')
                ]) {
                    sh """
                        echo "$SRC_PASS" | docker login --username "$SRC_USER" --password-stdin $SOURCE_REGISTRY
                        echo "$TGT_PASS" | docker login --username "$TGT_USER" --password-stdin $TARGET_REGISTRY
                    """
                }
            }
        }

        stage('Transfer Images') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'SRC_USER', passwordVariable: 'SRC_PASS'),
                    usernamePassword(credentialsId: 'nexus-credentialss', usernameVariable: 'TGT_USER', passwordVariable: 'TGT_PASS')
                ]) {
                    script {
                        def repos = sh(
                            script: "curl -s -u \"$SRC_USER:$SRC_PASS\" http://$SOURCE_REGISTRY/v2/_catalog | jq -r '.repositories[]'",
                            returnStdout: true
                        ).trim().split('\n') as List

                        if (repos.isEmpty()) {
                            error "‚ùå Source registry'de repository bulunamadƒ±!"
                        }

                        repos.each { repo ->
                            def tags = sh(
                                script: "curl -s -u \"$SRC_USER:$SRC_PASS\" http://$SOURCE_REGISTRY/v2/$repo/tags/list | jq -r '.tags[]'",
                                returnStdout: true
                            ).trim().split('\n') as List

                            if (tags.isEmpty()) {
                                echo "‚ö†Ô∏è $repo i√ßin tag bulunamadƒ±, atlanƒ±yor."
                                return
                            }

                            tags.each { tag ->
                                def srcImage = "$SOURCE_REGISTRY/$repo:$tag"
                                def tgtImage = "$TARGET_REGISTRY/$repo:$tag"

                                if (!sh(script: "docker images -q $srcImage || true", returnStdout: true).trim()) {
                                    echo "‚è¨ Pulling $srcImage"
                                    sh "docker pull $srcImage"
                                } else {
                                    echo "‚úÖ $srcImage zaten var, pull atlanƒ±yor."
                                }

                                echo "üöÄ Pushing $tgtImage"
                                sh """
                                    docker tag $srcImage $tgtImage
                                    docker push $tgtImage
                                    docker rmi $tgtImage $srcImage || true
                                """
                                echo "‚úÖ $repo:$tag aktarƒ±ldƒ±."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            emailext(
                subject: "‚úÖ ${JOB_NAME} #${BUILD_NUMBER} ba≈üarƒ±yla tamamlandƒ±",
                body: """
                    Pipeline ba≈üarƒ±yla tamamlandƒ±:<br/>
                    ‚Ä¢ Job: ${JOB_NAME}<br/>
                    ‚Ä¢ Build: ${BUILD_NUMBER}<br/>
                    <a href='${BUILD_URL}'>Console Log</a>
                """,
                to: "s.parti@gardiyan.com,c.kara@gardiyan.com,e.akdeniz@gardiyan.com",
                from: "devops@gardiyan.com",
                mimeType: 'text/html'
            )
        }
        failure {
            emailext(
                subject: "‚ùå ${JOB_NAME} #${BUILD_NUMBER} ba≈üarƒ±sƒ±z oldu",
                body: """
                    Pipeline ba≈üarƒ±sƒ±z oldu:<br/>
                    ‚Ä¢ Job: ${JOB_NAME}<br/>
                    ‚Ä¢ Build: ${BUILD_NUMBER}<br/>
                    <a href='${BUILD_URL}'>Console Log</a>
                """,
                to: "s.parti@gardiyan.com,c.kara@gardiyan.com,e.akdeniz@gardiyan.com",
                from: "devops@gardiyan.com",
                mimeType: 'text/html'
            )
        }
    }
}
