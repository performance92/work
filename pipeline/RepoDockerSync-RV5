pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }

    environment {
        SOURCE_REGISTRY = "172.16.20.141:8085"
        TARGET_REGISTRY = "172.16.6.180:5002"
    }

    stages {
        // Webhook payload'ƒ±nƒ± kontrol etme
        stage('Check Webhook Payload') {
            when {
                expression {
                    // UUID, repo ve tag parametrelerinin bo≈ü olmadƒ±ƒüƒ±nƒ± kontrol et
                    return params.'jenkins-generic-webhook-trigger-plugin_uuid' != null &&
                           params.repo != null &&
                           params.tag != null
                }
            }
            steps {
                echo "‚úÖ Webhook payload is valid. Starting pipeline..."
                echo "UUID: ${params.'jenkins-generic-webhook-trigger-plugin_uuid'}"
                echo "Repository: ${params.repo}"
                echo "Tag: ${params.tag}"
            }
        }

        // Registry'lere login olma
        stage('Login to Registries') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'SOURCE_USER', passwordVariable: 'SOURCE_PASS')]) {
                        sh "echo \"$SOURCE_PASS\" | docker login --username \"$SOURCE_USER\" --password-stdin $SOURCE_REGISTRY"
                    }

                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'TARGET_USER', passwordVariable: 'TARGET_PASS')]) {
                        sh "echo \"$TARGET_PASS\" | docker login --username \"$TARGET_USER\" --password-stdin $TARGET_REGISTRY"
                    }
                }
            }
        }

        // ƒ∞majlarƒ± √ßekme ve ta≈üƒ±ma (sadece "latest" tag'lƒ± imajlar, hedefte "stable" olarak etiketlenecek)
        stage('Pull and Push All Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'SOURCE_USER', passwordVariable: 'SOURCE_PASS')]) {
                        def repoOutput = sh(
                            script: "curl -s -u \"$SOURCE_USER:$SOURCE_PASS\" http://$SOURCE_REGISTRY/v2/_catalog | jq -r '.repositories[]'",
                            returnStdout: true
                        ).trim()

                        if (!repoOutput) {
                            error "‚ùå No repositories found in source registry!"
                        }

                        def repositories = repoOutput.split('\n')
                        echo "üîç Found repositories: ${repositories}"

                        for (repo in repositories) {
                            def tagOutput = sh(
                                script: "curl -s -u \"$SOURCE_USER:$SOURCE_PASS\" http://$SOURCE_REGISTRY/v2/$repo/tags/list | jq -r '.tags[]'",
                                returnStdout: true
                            ).trim()

                            if (!tagOutput) {
                                echo "‚ö†Ô∏è No tags found for repository: ${repo}, skipping..."
                                continue
                            }

                            def tags = tagOutput.split('\n')
                            echo "üì¶ Tags in ${repo}: ${tags}"

                            for (tag in tags) {
                                // Sadece "latest" tag'lƒ± imajlarƒ± i≈üleme alƒ±yoruz
                                if(tag != "latest") {
                                    echo "‚ö†Ô∏è Skipping tag ${tag} for ${repo} because it is not 'latest'."
                                    continue
                                }

                                def imageName = "${SOURCE_REGISTRY}/${repo}:${tag}"

                                def imageExists = sh(
                                    script: "docker images -q ${imageName} || true",
                                    returnStdout: true
                                ).trim()

                                if (imageExists) {
                                    echo "‚úÖ ${imageName} already exists locally, skipping pull."
                                } else {
                                    echo "‚è¨ Pulling ${imageName}..."
                                    sh "docker pull ${imageName}"
                                }

                                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'TARGET_USER', passwordVariable: 'TARGET_PASS')]) {
                                    echo "üöÄ Pushing ${imageName} to ${TARGET_REGISTRY}/${repo}:stable"
                                    sh """
                                        docker tag ${imageName} ${TARGET_REGISTRY}/${repo}:stable
                                        docker push ${TARGET_REGISTRY}/${repo}:stable
                                        docker rmi ${TARGET_REGISTRY}/${repo}:stable ${imageName} || true
                                    """
                                    echo "‚úÖ ${repo}:${tag} successfully transferred as 'stable' and cleaned up!"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    // Pipeline sonrasƒ± i≈ülemler
    post {
        success {
            script {
                def mailList = "s.parti@gardiyan.com,c.kara@gardiyan.com,e.akdeniz@gardiyan.com"
                emailext(
                    subject: "‚úÖ Jenkins Pipeline tamamlandƒ±: ${JOB_NAME} #${BUILD_NUMBER}",
                    body: """
                        <h1>üöÄ Pipeline ba≈üarƒ±yla tamamlandƒ±</h1>
                        <ul>
                            <li><b>Job:</b> ${JOB_NAME}</li>
                            <li><b>Build Number:</b> ${BUILD_NUMBER}</li>
                            <li><b>Result:</b> ${currentBuild.result}</li>
                        </ul>
                        <p><b>T√ºm imajlar aktarƒ±ldƒ± ve ge√ßici dosyalar temizlendi üéâ</b></p>
                        <p><a href=\"${BUILD_URL}\">Console loglarƒ±nƒ± g√∂rmek i√ßin tƒ±klayƒ±n</a></p>
                    """,
                    to: mailList,
                    from: "devops@gardiyan.com",
                    mimeType: 'text/html'
                )
            }
        }
        failure {
            script {
                def mailList = "s.parti@gardiyan.com,c.kara@gardiyan.com,e.akdeniz@gardiyan.com"
                emailext(
                    subject: "‚ùå Jenkins Pipeline ba≈üarƒ±sƒ±z: ${JOB_NAME} #${BUILD_NUMBER}",
                    body: """
                        <h2>‚ö†Ô∏è Pipeline ba≈üarƒ±sƒ±z oldu </h2>
                        <ul>
                            <li><b>Job:</b> ${JOB_NAME}</li>
                            <li><b>Build Number:</b> ${BUILD_NUMBER}</li>
                            <li><b>Result:</b> ${currentBuild.result}</li>
                        </ul>
                        <p><b>L√ºtfen pipeline console loglarƒ±nƒ± kontrol edin</b></p>
                        <p><a href=\"${BUILD_URL}\">View Logs</a></p>
                    """,
                    to: mailList,
                    from: "devops@gardiyan.com",
                    mimeType: 'text/html'
                )
            }
        }
        always {
            echo "Workspace temizleniyor..."
            deleteDir()    
        }
    }
}
